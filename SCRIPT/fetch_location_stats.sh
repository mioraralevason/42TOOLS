#!/bin/bash

# ========================
# Configuration
# ========================
BASE_URL="https://api.intra.42.fr/v2/users"
INPUT_FILE="campus65_users.json"
OUTPUT_FILE="campus65_location_stats.json"
PROGRESS_FILE="location_stats_progress.txt"
CHECKPOINT_FILE="location_stats_checkpoint.json"

# Date param√©trable pour begin_at (argument ligne de commande, sinon d√©faut 2025-01-01)
BEGIN_AT="${1:-2025-01-01}"

# Vos credentials
CLIENT_ID="u-s4t2af-23f031abd5ab1c7afcd6b43148ddd70b2ae20692602fb8c142f94fabb55b5373"
CLIENT_SECRET="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"

# ========================
# Gestion des signaux (Ctrl+C, etc.)
# ========================
cleanup_and_save() {
    echo ""
    echo "üõë Interruption d√©tect√©e. Sauvegarde des donn√©es actuelles..."
    
    if [[ -f "$CHECKPOINT_FILE" ]]; then
        cp "$CHECKPOINT_FILE" "$OUTPUT_FILE"
        processed_count=$(jq 'length' "$OUTPUT_FILE" 2>/dev/null || echo "0")
        echo "üíæ Donn√©es sauvegard√©es dans '$OUTPUT_FILE' ($processed_count entr√©es)"
        echo "üìÑ Fichier de progression sauv√© dans '$PROGRESS_FILE'"
        echo ""
        echo "üîÑ Pour reprendre l√† o√π vous vous √™tes arr√™t√©, relancez le script."
        echo "   Les utilisateurs d√©j√† trait√©s seront automatiquement ignor√©s."
    else
        echo "‚ùå Aucune donn√©e √† sauvegarder"
    fi
    
    exit 130
}

# Capturer les signaux d'interruption
trap cleanup_and_save SIGINT SIGTERM

# ========================
# V√©rification d√©pendances
# ========================
command -v curl >/dev/null 2>&1 || { echo "Erreur : curl est requis mais non install√©."; exit 1; }
command -v jq >/dev/null 2>&1 || { echo "Erreur : jq est requis mais non install√©."; exit 1; }

# V√©rification du fichier d'entr√©e
if [[ ! -f "$INPUT_FILE" ]]; then
    echo "Erreur : Fichier d'entr√©e '$INPUT_FILE' non trouv√©."
    exit 1
fi

# ========================
# R√©cup√©rer le token
# ========================
echo "Obtention du token d'acc√®s depuis l'API 42..."
token_response=$(curl -s -X POST "https://api.intra.42.fr/oauth/token" \
    -u "$CLIENT_ID:$CLIENT_SECRET" \
    -d "grant_type=client_credentials&scope=public projects profile tig elearning forum" \
    -w "\nHTTP_STATUS:%{http_code}")

http_code=$(echo "$token_response" | grep "HTTP_STATUS:" | cut -d: -f2)
body=$(echo "$token_response" | sed '/HTTP_STATUS:/d')

if [[ "$http_code" -ne 200 ]]; then
    echo "Erreur : impossible d'obtenir le token (HTTP $http_code)"
    exit 1
fi

ACCESS_TOKEN=$(echo "$body" | jq -r '.access_token')
if [[ -z "$ACCESS_TOKEN" || "$ACCESS_TOKEN" == "null" ]]; then
    echo "Erreur : impossible d'obtenir le token d'acc√®s"
    exit 1
fi

echo "‚úÖ Token obtenu avec succ√®s."

# ========================
# Initialisation et r√©cup√©ration
# ========================
TOTAL_USERS=$(jq 'length' "$INPUT_FILE" 2>/dev/null)
if [[ -z "$TOTAL_USERS" || "$TOTAL_USERS" == "0" ]]; then
    echo "Erreur : Aucun utilisateur trouv√© dans '$INPUT_FILE'"
    exit 1
fi

# V√©rifier s'il y a une session pr√©c√©dente √† reprendre
PROCESSED_USERS=()
START_INDEX=0

if [[ -f "$CHECKPOINT_FILE" && -f "$PROGRESS_FILE" ]]; then
    echo "üîÑ Session pr√©c√©dente d√©tect√©e."
    
    # Lire les utilisateurs d√©j√† trait√©s
    if [[ -s "$PROGRESS_FILE" ]]; then
        mapfile -t PROCESSED_USERS < "$PROGRESS_FILE"
        START_INDEX=${#PROCESSED_USERS[@]}
        echo "üìä $START_INDEX utilisateurs d√©j√† trait√©s. Reprise √† partir de l'utilisateur $((START_INDEX + 1))."
    fi
    
    existing_count=$(jq 'length' "$CHECKPOINT_FILE" 2>/dev/null || echo "0")
    echo "üíæ Donn√©es existantes : $existing_count entr√©es"
else
    echo "üÜï Nouvelle session."
    echo "[]" > "$CHECKPOINT_FILE"
    echo "" > "$PROGRESS_FILE"
fi

echo "üìä Total √† traiter : $TOTAL_USERS utilisateurs"
echo "üìÖ P√©riode √† partir de : $BEGIN_AT"
echo "üí° Appuyez sur Ctrl+C √† tout moment pour sauvegarder et arr√™ter"

# ========================
# Fonction pour r√©cup√©rer les stats de localisation
# ========================
fetch_user_stats() {
    local user_id=$1
    local url="$BASE_URL/$user_id/locations_stats?begin_at=$BEGIN_AT"
    
    response=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" "$url" \
        -w "\nHTTP_STATUS:%{http_code}" \
        --connect-timeout 30 \
        --max-time 60)
    
    http_code=$(echo "$response" | grep "HTTP_STATUS:" | cut -d: -f2)
    body=$(echo "$response" | sed '/HTTP_STATUS:/d')
    
    if [[ "$http_code" -ne 200 ]]; then
        error_entry=$(jq -n --arg id "$user_id" --arg error "HTTP $http_code" \
            '{user_id: $id, error: $error, stats: null, timestamp: now | strftime("%Y-%m-%d %H:%M:%S")}')
        echo "$error_entry"
        return 1
    fi
    
    if ! echo "$body" | jq . >/dev/null 2>&1; then
        error_entry=$(jq -n --arg id "$user_id" --arg error "Invalid JSON" \
            '{user_id: $id, error: $error, stats: null, timestamp: now | strftime("%Y-%m-%d %H:%M:%S")}')
        echo "$error_entry"
        return 1
    fi
    
    stat_entry=$(echo "$body" | jq --arg id "$user_id" \
        '{user_id: $id, stats: ., error: null, timestamp: now | strftime("%Y-%m-%d %H:%M:%S")}')
    echo "$stat_entry"
    return 0
}

# ========================
# Fonction pour ajouter une entr√©e et sauvegarder
# ========================
add_and_save_entry() {
    local entry="$1"
    local user_id="$2"
    
    # Ajouter l'entr√©e au fichier checkpoint
    local temp_file="/tmp/temp_checkpoint_$$.json"
    jq --argjson new_entry "$entry" '. + [$new_entry]' "$CHECKPOINT_FILE" > "$temp_file" 2>/dev/null
    
    if [[ $? -eq 0 ]]; then
        mv "$temp_file" "$CHECKPOINT_FILE"
        
        # Mettre √† jour le fichier de progression
        echo "$user_id" >> "$PROGRESS_FILE"
        
        # Copier vers le fichier de sortie (sauvegarde continue)
        cp "$CHECKPOINT_FILE" "$OUTPUT_FILE"
    else
        echo "‚ö†Ô∏è  Erreur lors de la sauvegarde pour l'utilisateur $user_id"
        rm -f "$temp_file"
    fi
}

# ========================
# Traitement des utilisateurs
# ========================
echo ""
echo "üöÄ D√©but du traitement..."

COUNTER=$START_INDEX
SUCCESS_COUNT=$(jq '[.[] | select(.error == null)] | length' "$CHECKPOINT_FILE" 2>/dev/null || echo "0")
ERROR_COUNT=$(jq '[.[] | select(.error != null)] | length' "$CHECKPOINT_FILE" 2>/dev/null || echo "0")

for ((i=START_INDEX; i<TOTAL_USERS; i++)); do
    # Extraire l'utilisateur actuel
    user_json=$(jq -c ".[$i]" "$INPUT_FILE")
    user_id=$(echo "$user_json" | jq -r '.id')
    
    if [[ -z "$user_id" || "$user_id" == "null" ]]; then
        echo "‚ö†Ô∏è  ID utilisateur manquant √† l'index $i, skipping..."
        continue
    fi
    
    # V√©rifier si d√©j√† trait√© (au cas o√π)
    if printf '%s\n' "${PROCESSED_USERS[@]}" | grep -q "^$user_id$"; then
        echo "‚è≠Ô∏è  Utilisateur $user_id d√©j√† trait√©, skipping..."
        continue
    fi
    
    # R√©cup√©rer les stats
    echo -n "üîÑ Traitement utilisateur $((i+1))/$TOTAL_USERS ($user_id)... "
    stat_entry=$(fetch_user_stats "$user_id")
    fetch_result=$?
    
    # Sauvegarder imm√©diatement
    add_and_save_entry "$stat_entry" "$user_id"
    
    COUNTER=$((COUNTER + 1))
    if [[ $fetch_result -eq 0 ]]; then
        SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
        echo "‚úÖ Succ√®s"
    else
        ERROR_COUNT=$((ERROR_COUNT + 1))
        echo "‚ùå Erreur"
    fi
    
    # Affichage de progression toutes les 10 entr√©es
    if [[ $((COUNTER % 10)) -eq 0 ]]; then
        echo "üìà Progression: $COUNTER/$TOTAL_USERS (‚úÖ $SUCCESS_COUNT succ√®s, ‚ùå $ERROR_COUNT erreurs)"
    fi
    
    # Pause pour respecter les limites de l'API
    sleep 0.125
done

# ========================
# Finalisation
# ========================
echo ""
echo "üéâ Traitement termin√© avec succ√®s !"

# Statistiques finales
final_count=$(jq 'length' "$OUTPUT_FILE" 2>/dev/null || echo "0")
final_success=$(jq '[.[] | select(.error == null)] | length' "$OUTPUT_FILE" 2>/dev/null || echo "0")
final_errors=$(jq '[.[] | select(.error != null)] | length' "$OUTPUT_FILE" 2>/dev/null || echo "0")

echo "‚úÖ Toutes les stats enregistr√©es dans '$OUTPUT_FILE'"
echo "üìä Statistiques finales :"
echo "   - Total d'entr√©es : $final_count"
echo "   - Succ√®s : $final_success"
echo "   - Erreurs : $final_errors"

if [[ -f "$OUTPUT_FILE" ]]; then
    file_size=$(du -h "$OUTPUT_FILE" | cut -f1)
    echo "üìÅ Taille du fichier : $file_size"
fi

# Nettoyer les fichiers de progression (session termin√©e)
rm -f "$PROGRESS_FILE" "$CHECKPOINT_FILE"
echo "üßπ Fichiers temporaires nettoy√©s."